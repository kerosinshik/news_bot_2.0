import logging
from typing import List, Dict, Any
from datetime import datetime, date
import requests
from bs4 import BeautifulSoup
from .database import add_event, get_today_events, clear_old_data

logger = logging.getLogger(__name__)

TECHMEME_EVENTS_URL = "https://www.techmeme.com/events"


def fetch_upcoming_events() -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —Å–∞–π—Ç–∞ Techmeme.

    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö.
    """
    events = []
    try:
        response = requests.get(TECHMEME_EVENTS_URL, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')

        event_elements = soup.select('.rhov')

        for event in event_elements:
            try:
                div_elements = event.find_all('div')
                if len(div_elements) >= 3:
                    date_str = div_elements[0].text.strip()
                    name = div_elements[1].text.strip()
                    location = div_elements[2].text.strip()

                    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
                    date_parts = date_str.replace(',', '').split()
                    if len(date_parts) >= 2:
                        month = date_parts[0]
                        day = date_parts[1].split('-')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
                        year = date_parts[2] if len(date_parts) > 2 else str(datetime.now().year)
                        event_date = datetime.strptime(f"{month} {day} {year}", '%b %d %Y').date()

                        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
                        keywords = set(word.lower() for word in (name + " " + location).split() if len(word) > 3)

                        events.append({
                            'name': name,
                            'date': event_date,
                            'keywords': list(keywords)
                        })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}")

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(events)} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π —Å {TECHMEME_EVENTS_URL}: {e}")

    return events


def update_events():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
    logger.info("–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π
    clear_old_data(days=1)  # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
    new_events = fetch_upcoming_events()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    for event in new_events:
        add_event(event['name'], event['date'], event['keywords'])

    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def get_relevant_events(article_content: str) -> List[Dict[str, Any]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏.

    Args:
        article_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ).

    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.
    """
    today_events = get_today_events()
    relevant_events = []

    for event in today_events:
        event_keywords = event[3].split(',')
        if any(keyword.lower() in article_content.lower() for keyword in event_keywords):
            relevant_events.append({
                'id': event[0],
                'name': event[1],
                'date': event[2],
                'keywords': event_keywords
            })

    return relevant_events


def generate_events_digest() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å–æ–±—ã—Ç–∏–π.
    """
    upcoming_events = fetch_upcoming_events()

    if not upcoming_events:
        return "–ù–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."

    digest = "üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –º–∏—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:\n\n"

    for i, event in enumerate(upcoming_events[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Å–æ–±—ã—Ç–∏—è–º–∏
        digest += f"{i}. <b>{event['name']}</b>\n"
        digest += f"   üìÜ {event['date'].strftime('%d.%m.%Y')}\n"
        digest += f"   üîë {', '.join(event['keywords'][:5])}\n\n"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏

    digest += "\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è! üöÄ"

    return digest


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è
    logging.basicConfig(level=logging.INFO)

    print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")
    update_events()

    print("\n–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    today_events = get_today_events()
    for event in today_events:
        print(f"- {event[1]} ({event[2]})")

    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:")
    test_article = "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –ø—Ä–æ–π–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ"
    relevant = get_relevant_events(test_article)
    for event in relevant:
        print(f"- {event['name']} relevant—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –¥–ª—è —Å—Ç–∞—Ç—å–∏")

    print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å–æ–±—ã—Ç–∏–π:")
    digest = generate_events_digest()
    print(digest)

    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ events.py –∑–∞–≤–µ—Ä—à–µ–Ω–æ")