import logging
from typing import Dict, Any, Optional
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from .database import add_published_article, log_post_stats
from .utils import escape_html
from config import TELEGRAM_CHANNEL_ID, category_emoji

logger = logging.getLogger(__name__)


def publish_to_telegram(bot: telebot.TeleBot, article: Dict[str, Any], channel_id: str = TELEGRAM_CHANNEL_ID) -> \
Optional[int]:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç —Å—Ç–∞—Ç—å—é –≤ Telegram –∫–∞–Ω–∞–ª.

    Args:
        bot (telebot.TeleBot): –ò–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ Telegram.
        article (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å–∏.
        channel_id (str): ID –∫–∞–Ω–∞–ª–∞ Telegram –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.

    Returns:
        Optional[int]: ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram, –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ None.
    """
    try:
        message = format_message(article)

        result = bot.send_message(
            channel_id,
            message,
            parse_mode='HTML',
            disable_web_page_preview=False,
        )

        logger.info(f"–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {article['title']}")

        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–∞
        log_post_stats(result.message_id, datetime.now())

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö
        add_published_article(article['id'], article['title'], datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

        return result.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ {article['title']}: {e}")
        return None


def format_message(article: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram.

    Args:
        article (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å–∏.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    emoji_for_category: str = category_emoji.get(article['category'], "üß™")
    category_tag = f"#{article['category'].upper()}"

    message = f"{emoji_for_category} {category_tag}\n\n"
    message += f"<b>{escape_html(article['title'])}</b>\n\n"
    message += f"{escape_html(article['summary'])}\n\n"
    message += f"<a href='{article['link']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"

    return message


def create_article_keyboard(article: Dict[str, Any]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏.

    Args:
        article (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å–∏.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", url=article['link']))
    keyboard.row(
        InlineKeyboardButton("üëç", callback_data=f"like_{article['id']}"),
        InlineKeyboardButton("üëé", callback_data=f"dislike_{article['id']}")
    )
    return keyboard


def publish_digest(bot: telebot.TeleBot, digest_text: str, channel_id: str = TELEGRAM_CHANNEL_ID) -> Optional[int]:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –≤ Telegram –∫–∞–Ω–∞–ª.

    Args:
        bot (telebot.TeleBot): –ò–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ Telegram.
        digest_text (str): –¢–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞.
        channel_id (str): ID –∫–∞–Ω–∞–ª–∞ Telegram –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.

    Returns:
        Optional[int]: ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram, –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ None.
    """
    try:
        result = bot.send_message(
            channel_id,
            digest_text,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        logger.info("–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
        return result.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        return None


def update_post_stats(bot: telebot.TeleBot, message_id: int, channel_id: str = TELEGRAM_CHANNEL_ID):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–∞.

    Args:
        bot (telebot.TeleBot): –ò–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ Telegram.
        message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
        channel_id (str): ID –∫–∞–Ω–∞–ª–∞ Telegram.
    """
    try:
        message = bot.get_message(chat_id=channel_id, message_id=message_id)
        views = message.views if hasattr(message, 'views') else 0
        forwards = message.forward_count if hasattr(message, 'forward_count') else 0

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        log_post_stats(message_id, views=views, forwards=forwards)
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id}: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã - {views}, –ø–µ—Ä–µ—Å—ã–ª–∫–∏ - {forwards}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–∞ {message_id}: {e}")


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è
    logging.basicConfig(level=logging.INFO)

    from telebot import TeleBot
    from config import TELEGRAM_BOT_TOKEN

    bot = TeleBot(TELEGRAM_BOT_TOKEN)

    test_article = {
        'id': '1',
        'title': '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å',
        'summary': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã publisher.py',
        'link': 'http://example.com',
        'category': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        'is_breaking': False
    }

    result = publish_to_telegram(bot, test_article)
    if result:
        print(f"–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞, ID —Å–æ–æ–±—â–µ–Ω–∏—è: {result}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç—å—é")